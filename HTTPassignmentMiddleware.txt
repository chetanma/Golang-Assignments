//function to get hotel by making external HTTP GET req
func FetchDataFromSourceUrl(url string) ([]Hotel, error) {

	client := &http.Client{}
	payload := strings.NewReader(``)
	req, err := http.NewRequest("GET", url, payload)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Content-Type", "application/json")
	res, err := client.Do(req)

	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	} else {
		hotels := make([]Hotel, 0, 100)
		json.Unmarshal(body, &hotels)
		return hotels, nil
	}
}

//function to book hotel by making external HTTP PUT req
func BookHotel(hotelByte []byte) error {

	var hotelJson Hotel
	json.Unmarshal(hotelByte, &hotelJson)
	payload := strings.NewReader(string(hotelByte))
	id := strconv.Itoa(hotelJson.Id)

	client := &http.Client{}
	url := hotelJson.Sourceurl + "/book?id=" + id
	req, err := http.NewRequest("PUT", url, payload)
	if err != nil {
		fmt.Println(err)
		return err
	}
	req.Header.Add("Content-Type", "application/json")

	res, err := client.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return err
	}
	fmt.Println(string(body))

	return nil
}


-------------------------------------------------------------------------------
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

//Fetch Hotels Handler
func FetchHotelsHandler(sources []string) http.HandlerFunc {
	return func(rw http.ResponseWriter, r *http.Request) {
		rw.Header().Set("Content-Type", "application/json")

		hotelList := make([]Hotel, 0, 100)
		mapValues := r.URL.Query()
		hotelIdMap := mapValues["id"]
		sizeMap := mapValues["size"]

		//if no params passed, get all Hotels...
		if hotelIdMap == nil {
			for _, source := range sources {
				url := source + "/hotel"
				hotelListFromSource, err := FetchDataFromSourceUrl(url)
				if err != nil {
					rw.WriteHeader(http.StatusInternalServerError)
					fmt.Fprint(rw, "internal server error")
					return
				} else {
					hotelList = append(hotelList, hotelListFromSource...)
				}
			}
		} else {
			//get only hotel with provided id
			HotelId := mapValues.Get("id")
			for _, source := range sources {
				url := source + "/hotel?id=" + HotelId
				hotelFromSource, err := FetchDataFromSourceUrl(url)
				if err != nil {
					rw.WriteHeader(http.StatusInternalServerError)
					fmt.Fprint(rw, "internal server error")
					return
				} else {
					hotelList = append(hotelList, hotelFromSource...)
				}
			}
		}

		//Size Filter-->parameters allowed -> S, L, XL
		if sizeMap != nil {
			hotelListFilteredBySize := make([]Hotel, 0, 100)
			for _, hotel := range hotelList {
				for _, size := range sizeMap {
					if hotel.Size == size {
						hotelListFilteredBySize = append(hotelListFilteredBySize, hotel)
					}
				}
			}
			hotelListByte, _ := json.Marshal(hotelListFilteredBySize)
			fmt.Fprint(rw, string(hotelListByte))
			return
		}

		hotelListByte, _ := json.Marshal(hotelList)
		fmt.Fprint(rw, string(hotelListByte))
	}
}

//Book Hotel Handler
func BookHotelHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")

		body, _ := ioutil.ReadAll(r.Body)
		err := BookHotel(body)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			fmt.Fprint(w, err)
		} else {
			w.WriteHeader(http.StatusOK)
			fmt.Fprint(w, "Booking successful !")
		}
	}
}